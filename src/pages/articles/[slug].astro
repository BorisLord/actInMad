---
import Layout from '../../layouts/Layout.astro';
import PocketBase from 'pocketbase';
import { API_URL } from 'astro:env/client';
import { DateTime } from 'luxon';

export async function getStaticPaths() {
  const pb = new PocketBase(API_URL);
  const records = await pb.collection('articles').getFullList({});

  // Si records est vide, ne rien faire
  if (records.length === 0) {
    return [];
  }

  console.log(records[0]);
  return records.map((article) => ({
    params: { slug: article.slug },
    props: { article },
  }));
}

const { article } = Astro.props;

const formatDate = (date: string) => {
  return DateTime.fromSQL(date).setLocale('fr').toFormat('dd MMMM yyyy');
};

const isSameDate = (created: string, updated: string) => {
  return (
    DateTime.fromSQL(created).toISODate() ===
    DateTime.fromSQL(updated).toISODate()
  );
};

const formattedCreatedDate = formatDate(article.created);
const formattedUpdatedDate = formatDate(article.updated);
const showUpdated = !isSameDate(article.created, article.updated);
---

<Layout>
  <div class="max-w-3xl mx-auto p-4">
    <div>
      <div class="flex justify-between">
        <div>
          <h1 class="text-2xl font-bold">{article.Title}</h1>
          <p class="text-gray-500">
            Écrit par {article.writter || 'Auteur anonyme'}
          </p>
        </div>
        <div class="text-right text-xs">
          <p>
            Publié le {formattedCreatedDate}
          </p>

          {showUpdated && <p>Mis à jour le {formattedUpdatedDate}</p>}
        </div>
      </div>
    </div>
    {
      article.images.length > 0 && (
        <img
          src={`${API_URL}/api/files/articles/${article.id}/${article.images[0]}`}
          alt={article.Title}
          class="w-full h-64 object-cover mt-4 rounded-md"
        />
      )
    }
    <article class="prose max-w-none mt-6" set:html={article.content} />
  </div>
</Layout>



http://pocketbase-yggsoowcwok4og4gkoooow0o:8080

