---
import { Image } from "astro:assets";

import beigeFullLogo from "../../assets/logo/actInMadBeigeFullLogo.svg";
import actInMadRed from "../../assets/logo/actInMadRedFullLogo.svg";

import NavbarExtended from "../NavbarExtended";

import { Icon } from "astro-icon/components";

const { links = [] } = Astro.props;
const currentPath = Astro.url.pathname;
const isHomePage = Astro.url.pathname === "/";
---

<div class="mx-auto max-w-screen px-4 sm:px-6 lg:px-8">
  <div class="flex h-24 items-center justify-center">
    <div class="hidden md:flex items-center sm:mr-8">
      <Image
        src={isHomePage ? beigeFullLogo : actInMadRed}
        alt="L'arche d'Act In Mad"
        class="h-16 w-auto"
      />
    </div>

    <div class="hidden md:block">
      <nav aria-label="Global">
        <div class="flex">
          <ul class="flex items-center gap-5 sm:gap-3">
            {
              links.slice(0, -1).map((link: any) => (
                <li>
                  <a
                    href={link.href}
                    class={`${
                      isHomePage
                        ? "text-madBack"
                        : currentPath.replace(/\/$/, "") ===
                            link.href.replace(/\/$/, "")
                          ? "text-madRed"
                          : "text-black"
                    } hover:text-madRed whitespace-nowrap`}
                  >
                    {link.label}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </nav>
    </div>

    <div class="flex md:hidden">
      <button
        aria-label="Ouvrir/fermer le menu"
        aria-expanded="true"
        id="menu-toggle"
        class=`rounded ${isHomePage? "text-madBack" : "text-black"} transition `
      >
        <Icon id="menu-icon" name="lucide:book-open-text" size="28" />
      </button>
      <span
        class=`${isHomePage? "text-madBack" : "text-madRed"} text-md ml-2 mt-5`
      >
        {
          links
            .slice(0, -1)
            .find(
              (link: any) =>
                link.href.replace(/\/$/, "") === currentPath.replace(/\/$/, "")
            )?.label || ""
        }
      </span>
    </div>

    <nav
      id="menu"
      class=`absolute top-20 p-4 z-100 mt-4 rounded-xl shadow-2xl ${isHomePage ? 'bg-black' : "bg-madBack"}`
    >
      <ul class="flex flex-col items-center gap-4">
        {
          links.slice(0, -1).map((link: any) => (
            <li>
              <a
                href={link.href}
                class={`${
                  isHomePage
                    ? "text-madBack"
                    : currentPath.replace(/\/$/, "") ===
                        link.href.replace(/\/$/, "")
                      ? "text-madEncart"
                      : "text-madText"
                } hover:text-madEncart`}
              >
                {link.label}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
    <div>
      <NavbarExtended links={links} client:load />
    </div>
  </div>

  <script>
    const toggleButton = document.getElementById("menu-toggle");
    const menu = document.getElementById("menu");

    if (toggleButton) {
      toggleButton.addEventListener("click", () => {
        menu?.classList.toggle("hidden");
      });
    }

    window.addEventListener("DOMContentLoaded", () => {
      menu?.classList.add("hidden");
    });

    document.addEventListener("click", (event) => {
      if (
        menu &&
        !menu.contains(event.target as Node) &&
        !toggleButton?.contains(event.target as Node)
      ) {
        menu.classList.add("hidden");
      }
    });
  </script>
</div>
